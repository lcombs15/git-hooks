name: Git hooks Pipeline

on:
  push:
  pull_request:
  release:
    types: [ published ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python scripts/os_specific_requirements.py
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: bash
    - name: Prepare Scripts
      run: |
        chmod +x scripts/*
    - name: Lint
      run: |
        python scripts/lint.py
      shell: bash
    - name: Test
      run: |
        pytest --doctest-modules --cov=src/main/ --cov-report=xml src/test
    - name: Package
      run: |
        python scripts/package.py
    - uses: actions/upload-artifact@master
      with:
        name: githooks
        path: dist/
    - name: Integration
      run: |
        pytest src/integration
    - name: Upload code coverage to codecov
      if: runner.os == 'Linux'
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN  -f coverage.xml
    - name: Upload binaries to release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file_glob: true
        file: '*.zip'
        tag: ${{ github.ref }}
    - uses: actions/setup-ruby@v1
    - name: Send Webhook Notification
      if: ${{ always() }}
      env:
        JOB_STATUS: ${{ job.status }}
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        HOOK_OS_NAME: ${{ runner.os }}
        WORKFLOW_NAME: ${{ github.workflow }}
        WEBHOOK_REPO: ${{ secrets.WEBHOOK_REPO }}
        # On PRs from forks the secrets aren't included
        # The "test" commands prevents this step from failing
      run: |
        test $WEBHOOK_REPO -ne "" || (echo Missing repo && exit 0)
        test WEBHOOK_URL -ne "" || (echo Missing hook URL && exit 0)
        echo Status: $JOB_STATUS
        git clone $WEBHOOK_REPO webhook
        bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
      shell: bash